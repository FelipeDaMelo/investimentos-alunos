import { useState } from 'react';
import {
  XCircle,
  LockKeyhole,
  Banknote,
  ArrowRightLeft,
  SquarePlus,
  Calculator,
  ReceiptText,
  LineChart,
  Receipt,
  Image as ImageIcon
} from 'lucide-react';

const passos = [
  {
    titulo: 'Login e Senha',
    icone: <LockKeyhole className="w-7 h-7 text-blue-600" />,
    texto: 'Acesse com o nome do grupo e uma senha de 6 d√≠gitos. A senha ser√° usada para confirmar todas as opera√ß√µes sens√≠veis dentro da simula√ß√£o.'
  },
  {
    titulo: 'Dep√≥sitos Iniciais',
    icone: <Banknote className="w-7 h-7 text-green-600" />,
    texto: 'Ao iniciar, voc√™ informa o valor total investido e escolhe a porcentagem para Renda Fixa e Vari√°vel. O sistema distribui automaticamente.'
  },
  {
    titulo: 'Dep√≥sitos',
    icone: <Receipt className="w-7 h-7 text-green-600" />,
    texto: 'Use o bot√£o "Depositar" para incluir dinheiro no saldo dispon√≠vel para novos investimentos. Voc√™ pode escolher o destino: Renda Fixa ou Vari√°vel.'
  },

  {
    titulo: 'Transfer√™ncia entre Carteiras',
    icone: <ArrowRightLeft className="w-7 h-7 text-orange-600" />,
    texto: 'Use o bot√£o "Transferir" para mover valores entre Renda Fixa e Renda Vari√°vel, conforme necessidade do grupo.'
  },
  {
    titulo: 'Adicionar Ativos',
    icone: <SquarePlus className="w-7 h-7 text-blue-600" />,
    texto: 'Adicione ativos reais como a√ß√µes, FIIs, cripto ou t√≠tulos de renda fixa. O sistema calcula automaticamente rendimento, pre√ßo m√©dio e impostos.'
  },
  {
    titulo: 'Atualizar Valores',
    icone: <Calculator className="w-7 h-7 text-green-600" />,
    texto: `Clique em "Atualizar Valores de Investimentos" para atualizar todos os ativos da carteira:
- Renda Fixa: o sistema recalcula os rendimentos usando as taxas definidas para cada ativo.
- Renda Vari√°vel: os valores s√£o atualizados com base em cota√ß√µes reais de mercado.
Ap√≥s a atualiza√ß√£o, os cards exibem a valoriza√ß√£o ou desvaloriza√ß√£o de cada item, e o gr√°fico √© atualizado com o valor total da carteira naquele momento.
O bot√£o exige senha e pode ser utilizado a cada 30 minutos.`
  },
  {
    titulo: 'Dividendos (FIIs)',
    icone: <Banknote className="w-7 h-7 text-purple-600" />,
    texto: 'A partir do dia 15 de cada m√™s, √© poss√≠vel informar manualmente dividendos recebidos por FIIs. O valor ser√° somado ao saldo de Renda Vari√°vel.'
  },
  {
    titulo: 'Gr√°fico de Patrim√¥nio',
    icone: <LineChart className="w-7 h-7 text-cyan-600" />,
    texto: 'Visualize a evolu√ß√£o da carteira de investimentos com base nas transa√ß√µes realizadas. Pode ser exportado como imagem PNG.'
  },
  {
    titulo: 'Hist√≥rico de Transa√ß√µes',
    icone: <ReceiptText className="w-7 h-7 text-red-600" />,
    texto: 'Consulte o extrato completo com compras, vendas, dividendos, impostos e transfer√™ncias. Organizado por data e tipo de opera√ß√£o.'
  },
  {
    titulo: 'Imposto de Renda',
    icone: <span className="text-2xl" role="img" aria-label="le√£o">ü¶Å</span>,
    texto: `O sistema calcula automaticamente:
- IR sobre Renda Fixa no resgate (tabela regressiva).
- IR sobre lucro de Renda Vari√°vel com o bot√£o "Informar Imposto de Renda".
Crit√©rios:
- A√ß√µes: isen√ß√£o se vendas < R$20.000 no m√™s.
- Cripto: isen√ß√£o se vendas < R$35.000 no m√™s.
- FIIs: sempre tribut√°veis se houver lucro.
O valor √© deduzido automaticamente e registrado no hist√≥rico.`
  },
  {
    titulo: 'Foto do Grupo',
    icone: <ImageIcon className="w-7 h-7 text-pink-600" />,
    texto: 'Personalize sua experi√™ncia com o envio de uma imagem representando o grupo. Essa imagem aparece no topo da plataforma.'
  }
];

interface Props {
  onClose: () => void;
}

export default function TutorialModal({ onClose }: Props) {
  const [etapa, setEtapa] = useState(0);
  const total = passos.length;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto p-10 relative">
        <button onClick={onClose} className="absolute top-4 right-4 text-gray-500 hover:text-red-600 transition">
          <XCircle size={28} />
        </button>

        <div className="flex items-center gap-4 mb-4">
          {passos[etapa].icone}
          <h2 className="text-2xl font-bold text-blue-800">{passos[etapa].titulo}</h2>
        </div>

        <p className="text-gray-700 text-lg leading-relaxed mb-8 whitespace-pre-line">{passos[etapa].texto}</p>

        <div className="flex justify-between items-center mt-6">
          <button
            onClick={() => setEtapa((e) => Math.max(0, e - 1))}
            className="text-sm px-5 py-2 bg-gray-100 rounded hover:bg-gray-200"
            disabled={etapa === 0}
          >
            Voltar
          </button>

          <span className="text-sm text-gray-500">Etapa {etapa + 1} de {total}</span>

          {etapa < total - 1 ? (
            <button
              onClick={() => setEtapa((e) => Math.min(total - 1, e + 1))}
              className="text-sm px-5 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Pr√≥ximo
            </button>
          ) : (
            <button
              onClick={onClose}
              className="text-sm px-5 py-2 bg-green-600 text-white rounded hover:bg-green-700"
            >
              Ir para Simula√ß√£o
            </button>
          )}
        </div>
      </div>
    </div>
  );
}
